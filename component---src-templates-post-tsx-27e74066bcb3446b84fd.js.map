{"version":3,"file":"component---src-templates-post-tsx-27e74066bcb3446b84fd.js","mappings":"+LAWA,MAAMA,GAAmB,uCAEnBC,GAAK,uCAELC,GAAQ,uCAuBd,MArB2D,YAIvD,IAJiE,MACnEC,EAAK,KACLC,EAAI,SACJC,GACD,EAGC,OACEC,EAAAA,EAAAA,IAACN,EAAmB,MAIlBM,EAAAA,EAAAA,IAACL,EAAK,KAAEE,IACRG,EAAAA,EAAAA,IAACJ,EAAQ,MACPI,EAAAA,EAAAA,IAAAA,MAAAA,KAAMD,IACNC,EAAAA,EAAAA,IAAAA,MAAAA,KAAMF,IAId,ECrBA,MAAMG,GAAe,iJAUfC,GAAkBC,EAAAA,EAAAA,IAAQC,IAE9BJ,EAAAA,EAAAA,IAACK,EAAAA,EAAgBD,IAClB,qBAHuBD,CAGtB,0JA4BF,MAdmD,YAK/C,IALyD,MAC3DN,EAAK,KACLC,EAAI,SACJC,EAAQ,UACRO,GACD,EACC,OACEN,EAAAA,EAAAA,IAACC,EAAe,MACdD,EAAAA,EAAAA,IAACE,EAAe,CAACK,MAAOD,EAAWE,IAAI,eACvCR,EAAAA,EAAAA,IAACS,EAAY,CAACZ,MAAOA,EAAOC,KAAMA,EAAMC,SAAUA,IAGxD,EC5CA,MAAMW,GAAoB,gIAOpBC,GAAgB,2HAShBC,GAAG,gPAgCT,MAhByD,YAIrD,IAJ+D,GACjEC,EAAE,KACFC,EAAI,gBACJC,GACD,EACC,OACEf,EAAAA,EAAAA,IAACU,EAAoB,MACnBV,EAAAA,EAAAA,IAACW,EAAgB,CACfK,UAAU,WACVC,wBAAyB,CAAEC,OAAQJ,MAErCd,EAAAA,EAAAA,IAACY,EAAG,CAACK,wBAAyB,CAAEC,OAAQH,KAG9C,ECCA,MAtCmD,SAAU,GAM1D,IALDI,MACEC,mBAAmB,MAAEC,IAEvBC,UAAU,KAAEC,GACZC,aAAa,KAAEC,IAChB,EACC,MACEC,MAAM,GACJb,EAAE,KACFC,EAAI,gBACJC,EACAY,aAAa,MACX9B,EAAK,QACL+B,EAAO,KACP9B,EAAI,SACJC,EACAO,WACEuB,iBAAiB,gBAAEC,GAAiB,UACpCC,MAIJV,EAAM,GAEV,OACErB,EAAAA,EAAAA,IAACgC,EAAAA,EAAM,CAACnC,MAAOA,EAAOoC,YAAaL,EAASM,IAAKX,EAAMhB,MAAOwB,IAC5D/B,EAAAA,EAAAA,IAACmC,EAAQ,CACPtC,MAAOA,EACPC,KAAMA,EACNC,SAAUA,EACVO,UAAWwB,KAEb9B,EAAAA,EAAAA,IAACoC,EAAW,CAACvB,GAAIA,EAAIC,KAAMA,EAAMC,gBAAiBA,IAGxD,C","sources":["webpack://hshblog/./src/components/Post/PostHeadInfo.tsx","webpack://hshblog/./src/components/Post/PostHead.tsx","webpack://hshblog/./src/components/Post/PostContent.tsx","webpack://hshblog/./src/templates/post.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  category: string\n}\n\nconst PostHeadInfoWrapper = styled.div``\n\nconst Title = styled.div``\n\nconst PostData = styled.div``\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  category,\n}) {\n  const goBackPage = () => window.history.back()\n\n  return (\n    <PostHeadInfoWrapper>\n      {/* <PrevPageIcon onClick={goBackPage}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </PrevPageIcon> */}\n      <Title>{title}</Title>\n      <PostData>\n        <div>{category}</div>\n        <div>{date}</div>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 500px;\n\n  @media (max-width: 768px) {\n    height: 450px;\n  }\n`\n\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  // <GatsbyImage {...props} style={{ position: 'absolute' }} />\n  <GatsbyImage {...props} />\n))`\n  display: block;\n  position: relative;\n  z-index: -1;\n  width: 100%;\n  height: 400px;\n  // filter: brightness(0.25);\n  margin-bottom: 16px;\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  category,\n  thumbnail,\n}) {\n  return (\n    <PostHeadWrapper>\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      <PostHeadInfo title={title} date={date} category={category} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport './style.scss'\n\ninterface PostContentProps {\n  id: string\n  html: string\n  tableOfContents: string\n}\n\nconst PostContentContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  box-sizing: border-box;\n  padding-top: 40px;\n`\n\nconst MarkdownRenderer = styled.div`\n  width: 75%;\n  padding: 8px;\n\n  @media (max-width: 1080px) {\n    width: 90%;\n  }\n`\n\nconst Toc = styled.div`\n  width: 25%;\n  padding: 8px;\n  // padding-left: 20px;\n  position: sticky;\n  align-self: flex-start;\n  flex-grow: 0;\n  top: 72px;\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  border-radius: 6px;\n\n  @media (max-width: 1080px) {\n    display: none;\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({\n  id,\n  html,\n  tableOfContents,\n}) {\n  return (\n    <PostContentContainer>\n      <MarkdownRenderer\n        className=\"markdown\"\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n      <Toc dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n    </PostContentContainer>\n  )\n}\n\nexport default PostContent\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostPageItemType } from 'types/PostItem.types'\nimport Layout from 'components/Layout/Layout'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n  // pageContext: { slug: string; series: any[]; lastmod: string }\n  pageContext: { slug: string }\n}\nconst Post: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n  pageContext: { slug },\n}) {\n  const {\n    node: {\n      id,\n      html,\n      tableOfContents,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        category,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0]\n\n  return (\n    <Layout title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        category={category}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent id={id} html={html} tableOfContents={tableOfContents} />\n    </Layout>\n  )\n}\n\nexport default Post\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          id\n          html\n          tableOfContents\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            category\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostHeadInfoWrapper","Title","PostData","title","date","category","___EmotionJSX","PostHeadWrapper","BackgroundImage","_styled","props","GatsbyImage","thumbnail","image","alt","PostHeadInfo","PostContentContainer","MarkdownRenderer","Toc","id","html","tableOfContents","className","dangerouslySetInnerHTML","__html","data","allMarkdownRemark","edges","location","href","pageContext","slug","node","frontmatter","summary","childImageSharp","gatsbyImageData","publicURL","Layout","description","url","PostHead","PostContent"],"sourceRoot":""}